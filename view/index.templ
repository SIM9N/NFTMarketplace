package component

templ Index() {
  <!DOCTYPE html>
  <html lang="en" data-theme="dracula">
    <head>
      <meta charset="UTF-8"></meta>
      <meta name="viewport" content="width=device-width, initial-scale=1.0"></meta>
      <link href="assets/styles.css" rel="stylesheet"></link>
      <script src="assets/htmx.min.js" type="application/javascript"></script>
      <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js" type="application/javascript"></script>
      @Scripts()
    </head>

    <body class="w-screen h-screen">
      @Navbar("")   
    </body>
  </html>
}

templ Navbar(account string) {
  <div id="navbar" class="navbar bg-base-100">
    <div class="navbar-start">
      <a href="/" class="btn btn-ghost text-xl">NFT Marketplace</a>
    </div>

    <div class="navbar-center">
      <ul class="menu menu-horizontal bg-base-200 rounded-box">
        <li><a>Market</a></li>
        <li><a>My NFTs</a></li>
      </ul>
    </div>

    <div class="navbar-end">
      if account == "" {
          <a class="btn btn-primary" onclick='connectWallect(this)'>Connect</a>
      } else {
        <div>{account}</div>
      }
    </div>
  </div>
}

var scriptsHandle = templ.NewOnceHandle()
templ Scripts() {
  @scriptsHandle.Once() {
    <script type="text/javascript">   
      var provider = window.ethereum;
      var web3 = undefined;   

      async function connectWallect() {
        try{
          let accounts = await web3.send("eth_accounts", [])
          if(accounts.length == 0){
            accounts = await web3.send("eth_requestAccounts", [])
            return
          }

          provider.emit("accountsChanged", accounts)
        }catch(err){  
          console.error("connectAccount", err)
          if(err.code === 4001){
            alert(`Failed to connect metamask account: ${err.message}`)
          }
        }
      }

      async function handleAccountsChanged(accounts) {
        try{
          console.log("handleAccountsChanged", accounts)
          const account = accounts.length > 0 ? accounts[0] : ""
          await htmx.ajax('POST', '/events/onAccountConnected', {
            target:'#navbar', 
            swap:'outerHTML', 
            values: { account }
          })
        }catch(err){
          console.error("handleAccountsChanged", err)
        }
      }

      function connectMetaMask() {
        const web3 = new ethers.providers.Web3Provider(provider)
        if(!provider.isConnected) {
          alert("Metamask is not connected to current chain, please reload the page and try again")
          return
        }

        provider.on("_initialized", (connectInfo) => console.warn("_initialized not implemented", connectInfo));
        provider.on("connect", (connectInfo) => console.warn("connect not implemented", connectInfo));
        provider.on("accountsChanged", handleAccountsChanged);
        provider.on("chainChanged", (chainId) => console.warn("chainChanged not implemented", chainId));
        provider.on("disconnect", (error) => console.warn("disconnect not implemented", error));

        return web3
      }

      function main(){
        if(provider=== undefined) {
          alert("No ethereum provider")
          return
        }
        if(typeof window.ethereum.isMetaMask === "boolean" && window.ethereum.isMetaMask){
          web3 = connectMetaMask(provider)
        }

        if(web3 === undefined){
          alert("No web3 provider")
          return;
        }
      }

      main()
    </script>
  }
}